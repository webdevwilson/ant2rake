# ant element definitions
# this is where we define what to do when a node is found
# ant2rake calls ant2rake on all child nodes
module Ant2Rake

  # this occurs when it hasn't been overridden
  ant_element 'default' do
    args = []
    self.attributes.each do |k,v|
      args << ":#{k} => \"#{v}\""
    end
    block=''
    if self.elements.size > 0
      block="do\n#{ant2rake}\nend"
    end
<<RUBY
ant.#{self.name} #{args.join(', ')} #{block}
RUBY

  end
#
#  ant_element 'project' do
#    values = []
#    self.attributes.each do |k,v|
#      values << "  :#{k.to_identifier} => \"#{v}\""
#    end
#<<RUBY
## Build file automatically generated by ant2rake gem
#
#if not RUBY_PLATFORM[/java/] or not defined? Ant
#  throw "Rake must be running under JRuby 1.5 or later for this build script"
#end
#
#require 'ant'
#require 'fileutils'
#require 'rbconfig'
#
#@project = {
##{values.join(",\n")}
#}
#
#@properties = []
##{ant2rake}
#RUBY
#  end
#
#  ant_element 'property' do
#    if self.attributes['environment']
#      "@environment = \"#{self.attributes['environment']}\"\n"
#    else
#      value = self.attributes['value'] || self.attributes['location']
#      "@properties['#{self.attributes['name']}'] = #{value.resolve_properties}\n"
#    end
#  end
#
#  ant_element 'target' do
#    name = ":#{self.attributes['name'].to_identifier}"
#    desc="\ndesc \"#{self.attributes['description']}\"" if self.attributes['description']
#    depends = ''
#    if ( self.attributes['depends'] )
#      dependencies = self.attributes['depends'].split(',').collect { |it| ":#{it.strip.to_identifier}" }
#      if dependencies.length == 1
#        depends = "=> #{dependencies[0]}"
#      else
#        if dependencies.length > 1
#          depends = "=> [#{dependencies.join(', ')}]"
#        end
#      end
#    end
#    <<RUBY
##{desc}
#task #{name} #{depends} do
##{ant2rake}
#end
#
#RUBY
#  end
#
#  ant_element 'macrodef' do
#
#    method_name=self.attributes['name'].to_identifier
#    parameters = []
#    self.each_element('attribute') do |attribute|
#      name=attribute.attributes['name'].to_identifier
#      default=attribute.attributes['default']
#      if default
#        parameters << "#{name}=#{default.resolve_properties}"
#      else
#        parameters << name
#      end
#    end
#<<RUBY
#def #{method_name} (#{parameters.join(', ')})
##{ant2rake}
#end
#
#RUBY
#  end
#
#  ant_element 'attribute' do
#    # nothing, these are handled in macrodef
#    ''
#  end
#
#  ant_element 'mkdir' do
#<<RUBY
#FileUtils.mkdir_p #{self.attributes['dir'].resolve_properties}
#
#RUBY
#  end
#
#  ant_element 'rmdir' do
#<<RUBY
#FileUtils.rm_rf #{self.attributes['dir'].resolve_properties}
#
#RUBY
#  end
#
#  ant_element 'delete' do
#    if self.attributes['dir']
#      "FileUtils.rm_rf #{self.attributes['dir'].resolve_properties}"
#    end
#  end
#
#  ant_element 'condition' do
#    out = "@properties['#{self.attributes['property']}'] = "
#    self.elements.each do |subcond|
#      out << ant2rake(subcond)
#    end
#    out << "\n"
#  end
#
#  ant_element 'and' do
#    clauses = self.elements.collect { |it| ant2rake(it) }.join(' and ')
#  end
#
#  ant_element 'not' do
#    "(not #{ant2rake})"
#  end
#
#  ant_element 'os' do
#    family=''
#    if self.attributes['family'][/windows|dos/]
#      family = 'mswin'
#    elsif self.attributes['family'][/mac/]
#      family = 'darwin'
#    elsif self.attributes['family'][/unix/]
#      family = 'linux'
#    end
#    "(Config::CONFIG['host_os'][/#{family}/])"
#  end
#
#  ant_element 'isset' do
#    "(defined? @properties['#{self.attributes['property']}'])"
#  end
#
#  ant_element 'available' do
#<<RUBY
#@properties['#{self.attributes['property']}'] = FileUtils.exists(#{self.attributes['file'].resolve_properties})
#RUBY
#  end
#
#  ant_element 'sequential' do
#    ant2rake
#  end
#
#  ant_element 'echo' do
#    message = self.attributes['message'].gsub('"','\"').resolve_properties
#    if self.attributes['file']
#      mode=self.attributes['append'] ? 'w+' : 'w'
#<<RUBY
#out_file=File.new(#{self.attributes['file'].resolve_properties},'#{mode}')
#out_file << #{message}
#RUBY
#    else
#<<RUBY
#print #{message}
#RUBY
#    end
#
#  end
#

end